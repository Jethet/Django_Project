February 25:
After the prep meeting with my coach Lori King, I started out learning Django with the Djangogirls tutorial. For this, I installed PaizaCloud and created a virtual environment. The tutorial is interesting, though aimed at a younger audience with a lot of "you're awesome" etc. Anyway, my goal was to work through the tutorial this week and also look at an HTML tutorial that codebar.io has on its website.

February 27:
The initial plan proved to be a bit too optimistic. The tutorial turned out to be somewhat outdated: a newer version of Django caused problems. I decided to switch to a tutorial called Django-Marcador. This tutorial is aimed at creating an app to manage bookmarks. It is interesting and I achieved some things (getting the basic app running on the development server, being able to use it and make changes online etc.). However, further down into the code (building the frontend, configuring URLs, views and templates) it turned out that also this tutorial used an older version of Django and there were too many conflicts in the code.

LESSONS LEARNED: Don't start any tutorials without being absolutely clear a) what the current version of the software used in the tutorial is, and b) whether it is using the right/latest version of Python 3.

February 28:
The obvious choice: tutorials from Django. The tutorial guides you through the creation of a basic poll application:
- a public site that lets people view polls and vote in them.
- an admin site that lets the administrator add, change and delete polls.

There is also an advanced tutorial (perhaps later?).
So what can I say about this tutorial (docs.djangoproject.com)? It works so far.

BUT: In almost all documentation and tutorials I have come across, the importance of a virtual environment was highlighted.
That is very good because a venv is indeed important. But why is the information always incomplete? You get info on how to create and activate a virtual environment, but nobody explains that if you work with a venv you have to INSTALL DJANGO IN THE VENV even if you have installed Django before. You should also CONTINUE in the venv with django-admin startproject mysite.
Otherwise, you will not be able to run $python manage.py runserver and get to see the "Congratulations" page on hhttp://127.0.0.1:8000/ .... that would be a pity, no?

So there we are, lost at least four hours to find this out. They say you learn by doing. Yeah. Especially by doing the same thing over and over the wrong way because of incomplete information.

March 1:
Still following the tutorial and no major problems so far. It has a clear logic and I more or less understand what is done, although I will not be able to reproduce it by myself. I have created models, learned to update the settings to include the app under INSTALLED APPS so that the app is integrated into the overall project. I understand the app is 'plugable' and can be used in other projects by just adding it as installed app. I have also learned about the commands makemigration and migrate as way of saving and applying changes to models. In the project SQL is used and it is recommended to use SQLite so I have seen how SQL creates table names, primary keys, IDs, Foreign Key and all sorts of field types. The command sqlmigrate prints to screen everything SQL provides for your database and you can check it. With the command python manage.py check, you can check if there are issues in your project.

So that is a lot of information. The API was introduced and some commands in the shell were demonstrated and explained. There is a lot more to it but I now have an impression of the ways you can search the database using primary keys or id's etc. etc. Very interesting but also too much to take in so it was good the tutorial only dived into a few examples. After this, working with URLs was explained and after creating views (specific web pages) it was possible to access these online. All of this worked fine. The error messages I received I could quickly find in my code and correct. The server will not run if the views contain errors, and the command line returns error messages that immediately show what is wrong. The views were terribly basic (just a line of text in a horrible font) but it is great that things work as they should.

March 2:
So what can I say? Yesterday must have been my lucky day. Today, the command to get the venv activated did not work. I spent another three hours on Stackoverflow and other websites to find out the problem. Although officially Python 3.7 uses the command: source venv/bin/activate to activate the venv, and although I have used that the entire day yesterday, today someone must have decided it would be fun to disable this command. I got nothing but error messages. Finally, just trying something with my eyes closed, I got the venv running using . bin/activate without knowing why. Without the venv active, you cannot run the server and not continue with the tutorial. Fine, it worked for now. I learned some more about views, templates and about how to avoid hardcoded URLs by using a template for paths.

I am trying to get the bigger picture but it is so much information that it is not easy to get my head around it. Maybe I will make some sort of overview of the steps without all the detail, for an at-a-glance idea of what I am doing. The project is still interesting and I very much want to continue and also do more of these tutorials. Somehow I feel a bit stressed because I lose so much time with these stupid things like not getting the venv activated. We'll see how that works (or not) tomorrow.

March 3:
I continued with the tutorial. The venv is still activated - I will not deactivate it until I find out what this problem with the command is.
The app runs on the server but not all pages. The admin pages run OK, that is good. I have gone through the .html files a number of times to correct the code. Compared to Python, HTML looks ugly and is hardly readable (but I have not yet done any tutorial on HTML so that is a handicap). It is a very complicated language and as it turned out, I forgot a number of / in the code. I also found that the file with the URL paths has the paths as a list but still adds a comma at the end of the list. Strange.
Anyway, after making corrections I ran the server and with http://127.0.0.1:8000/polls/ I do get the page with the poll question (just one formulated so far) and when I click on it, I get the two options to choose from. When I choose and click on vote, however, a page with Error 500 appears. I have gone through all my pages (models, views, urls) and all HTML templates but cannot find incorrect code. I still wonder about this comma at the end of the list of URLs but since both the mysite/mysite/urls.py and the mysite/polls/urls.py use brackets as well as a comma after the last item, I suppose it must be correct.
I need someone to check the code for me. There is a vague remark on Stackoverflow about the url maybe being used already or a 'wild card' - no idea what is meant by that.

Something else I learned: by default, Django puts DEBUG=True in the settings.py file. It seems you should only set this to True in case you want to test the app. For deploying your web app, you need to change the setting to DEBUG=False. That returns an error when you run the server because if DEBUG=False you also need to change ALLOWED_HOSTS = [] to ALLOWED_HOSTS = ['*'] or specify the path between '' and add 'localhost' (I did not try this). It is very strange that DEBUG=True is the default when at the same time Django docs warns that it should 'never' be set to True unless for testing (it is a security issue, I believe). Why not set the default to False? I am probably naive to think that would be the solution ...

LESSONS LEARNED: Expect the unexpected. Even if the documentation prescribes a specific command it may still not work - the mysteries of coding.

March 4:
In my Skype with Lori I discussed the fact that it would be helpful to have someone go through the code with me. I am pretty certain there is a hickup somewhere but after going through the various code files a few times, I think I have become blind to mistakes. Also, it would be a help to get an explanation by someone else. A tutorial only goes so far. The Django tutorial does not have a Q&A section, which is not helpful.

Today I have gone through the section on testing. Using the code given in the tutorial, it is not difficult to test and I discovered one typo in my code. I also got a quick introduction to the Django test client, which simulates a user interacting with the code at the view level. The examples were done in the shell, importing the setup_test_environment from django.test.utils and subsequently importing Client from django.test and creating an instance of the Client to use (client = Client()). With several commands such as response = client.get('/'), response.status_code, response.content etc. it was possible to see what the user experiences using the poll app. It is an interesting tool but I would need to know more about it.

Right now, I only have a very vague idea why the code for the tests is written the way that it is and I would not be able to write these tests myself. I have the feeling that I am getting lost in a sea of functions and variables and am losing the overview a bit. In any case, my goal is to do at least two more tutorials after this one to see if I can cement some of this into memory for longer than just a few weeks.

March 5:
On March 3 I found that there was an issue with DEBUG and ALLOWED_HOSTS. Today I again run into an issue with DEBUG. To run .css files, DEBUG must be set to True. This may cause issues again as I described in my post of March 3, but I do need to see if the layout is changing as a result of my css code. Yes, it does.
The only thing is that the background does not change even though a background.gif file has been created and included in the css stylesheet. After hunting down this issue on Stackoverflow, I found a question regarding using a jpg as background. With the code suggested for this issue, I changed my polls stylesheet to include a picture (our lovely terrace in Maastricht with flowers growing on the walls etc.). And it works: this is now the background when I run the server. Amazing. I see the picture in the background.gif and am wondering now whether this background.gif is a template that loads pictures?? According to the tutorial, having this gif would result in "the background loaded in the top left of the screen". Nope. Does not work. But my jpg is now the background of the page ...

The tutorial is finished and I will do some reading on Django: it will probably make a bit of sense now that I have done one tutorial. I plan to have another look at the DjangoGirls tutorial to see if I can make more sense of it now.

March 10:
This week I will look into the DjangoGirls tutorial to see if I can follow it after finishing the original Django tutorial. I expect to be able to deal with the incompatibilities based on what I know now.

March 12:
Today I worked through another unit of my Udemy course on generators and iterators. I want to keep up with the course in addition to all the other things I am doing (have done 52% so far of the total course - they show the percentage all the time, to keep you motivated I guess). The current unit is the so-called Final Capstone Project, which turns out to be a list of some 100 (!) ideas for projects. You are expected to choose one project that you think you can do within a day, and a second project that you expect will take you more than a week and involves a lot of Stackoverflowing etc. The projects are centered around numbers, algorithms, graphs, data structures, text, etc. I would like to do a project from every topic but it takes time away from what I want/need to do to prepare for a SoC. So far, I have done a simple project: cost calculation for covering a floor with tiles (function with parameters: width, height, price). It took me half an hour or so ... but I cannot check my solution anywhere. The code runs, so that's it for now.

March 13:
Change of plans: on Saturday 16 I will attend a workshop on html and css. Since my coach Lori and I agreed that I should work on these two topics, I decided to start with the html tutorial on the codebar.io website. Timewise, it makes more sense. The Capstone Project will have to wait.
The first HTML tutorial went very well. The tutorial is clear and I built the famous owl website without any problems. I can find enough info online to give me more background on HTML. I like it. Compared to programming, it seems pretty straightforward as long as you stick to the syntax. That is the complicating factor because the syntax is not very accessible: it is like learning German - the rules are the rules and that is what you stick to under all circumstances.
I also went through the first CSS tutorial and will finish that tomorrow I hope. It is very satisfying to see changes you make in the code reflected directly in the website. I am sure there is a snag somewhere and that it cannot be this 'easy'. We'll see.

March 14:
Today, I finished the CSS tutorial and continued with the HTML/CSS Beyond the basics tutorial (3rd codebar tutorial).

March 16:
Workshop on HTML and CSS by Le Wagon and One Ragtime. It was an interesting workshop although the explanation of HTML and CSS was very much high-speed. It is understandable that you generate more interest for a workshop if you promise people they will produce their own profile page online in just one workshop. On the other hand, it was clear some could not keep up. I was glad I already did the first introduction tutorials in HTML and CSS: a lot of it I had already looked at and that was really good because it was way to apply what I had just learned one or two days before.
Publishing the profile page with GitHub Pages was not a good choice. In the info about the workshop it was recommended to have Chrome and SublimeText installed. There was no mention of GitHub so most women needed to get that downloaded and get an account at the same moment the teacher wanted to publish the profile page. GitHub is not something you can explain in five minutes and it is not good for people's self-confidence to be made insecure by rushing through something they do not know and cannot understand in a few minutes.
In the panel discussion I was introduced to Laura Fernandez Gimenez, CEO and Founder of AllWomen.Tech. Impressive CV and a very likeable and interesting person. I looked at their website and have asked for info on the workshop for data analysis with Python. More and more I get the feeling that data analysis, machine learning and AI are fields that women should be active in.

March 17:
I have processed some of the info of yesterday (websites for fonts, HTML colour codes, etc.) and continued with the third tutorial.

March 19:
Yesterday and today I worked on the third tutorial and created the final version of the Ada Lovelace webpage. I am unsure about how to use padding and margin but that will come. The next tutorial is all about layout and formatting. I have checked the AL webpage example of codebar and my own and was able to spot the differences that they announced in the 'bonus' part. I think I understand how to use the inspector tool to check the html and css code and find differences and mistakes. It is a lot of information though, and it will take some practice to get a real overview of all the elements and properties involved. Still, it's very interesting.
I think it is fantastic that the codebar tutorials for HTML and CSS use information about women such as Ada Lovelace and Grace Hopper to build webpages. It is a great way to learn more about these admirable women. I want to know about them.

March 20:
Today I finished the fourth tutorial, making the Grace Hopper webpage. I like working with HTML/CSS: you see immediate results
when you change things. Lori and I did a Skype and she asked me to think about working with Django in the future in a professional setting and whether or not I would like that. I think building websites is gratifying because you see a (relatively) quick result so I would be interested. Still, I need to know more about Django because I have hardly scratched the surface right now.
I went through a quick 19-steps tutorial on CSS layout (learnlayout.com) which was useful because it gave more explanation on the things I have worked on today. Also, they covered a few new features of CSS (building columns, for example) that look interesting.
I will continue with the fifth HTML-CSS tutorial tomorrow: Diving into HTML5 and CSS3.

March 21:
Lori has organised a Django coach for me to work on Django during the Codebar workshop. This is great. I asked for someone to explain a few things and it is fantastic that Lori has found someone.
So I decided to go back to the Django Tutorial to make an overview of my questions and issues. I spent three hours (!!!) getting nowhere because I could not even get the virtual environment activated. What frustrates me most is that the information online goes into all sorts of directions and does not help at all. Even the Python documentation is not clear. It would be an idea to add a simplified version to these documentation: for idiots, if you want to get this then do that and nothing else. Right now, the documentation goes on very quickly into everything that is deprecated (frankly, I don't care), all sorts of different commands for Windows with no indication what should be used for OS X (or is that assumed to be the standard? who knows), and then a small table with the commands to activate the venv for either Posix (whatever that is) or Windows. Since Posix is not Windows, I assume this should work for OS X. But it does not work for me. Even though I have done this entire tutorial three weeks ago and got the webpages working, I now cannot even get the venv activated. And looking for info online gets me nowhere: information on Stackoverflow differs from the Python docs say, the Virtualenv site says something else, the Django tutorial is unclear, and I am getting nowhere.
Fortunately, during the Codebar workshop I was supported by Emily! Emily is intelligent, to-the-point, good at explaining, quick to grasp my code (and its mistakes) and was an enormous help. She provided better insight into how the various elements of Django work together, what MVC (aka MTV)means and the 'tree' of files that Django creates when you start a project. In other words, I feel like I can conquer the world of Django now :-D. Well, until the next problem pops up, that is. But Emily told me I can get in touch whenever I need help, so that is great.

March 23:
During our skype session yesterday, Lori and I talked a bit more about possible ways to organise a SoC and whom I could partner with. She also mentioned that Codebar BCN could do with a few more organisers. Not sure if they are looking at me for this but of course I would be willing to be part of it - I have so much to thank this group of people for!
I have messed around a bit with the profile page I created a week ago during the HTML-CSS workshop at Le Wagon. It feels as if I understand it a bit. I was able to change some headers and text, to get a background picture into the page and add a link to my LinkedIn account.
The plan is to continue with the HTLM-CSS tutorials from Codebar (two more to go) and after that I am not sure. I have a few other tutorials I can look at but perhaps it would be good to go back to Django first. RealPython has a beginners tutorial on starting a project with Django. I think their tutorials are very good: clear and complete, not overloaded with information that you cannot grasp (yet). I even took out a year's subscription to their channel, loads of info and videos etc. I have used a lot of their material for free in the last year, including an entire book that you can download for free, and newsletters etc. It is time to pay for what they make available. It is great that internet offers so much for free but it is also an investment by people who make this available and at a certain moment money should become an item of consideration, I feel.
So loads to do. I also added a tutorial on how to write comments in your code. This I do not do in a structural manner although I know how important it is - sometimes, I cannot read my own code and do not understand what it is supposed to do. So that is on the list in Trello as well for the coming period.

March 25:
Tutorial 6 is a challenge to make a webpage by yourself. There was a short explanation of header/nav/section/article/aside but it is not entirely clear to me how I should use these. Perhaps it would be better to dive into that later, when I have a better grasp of building a webpage. The tutorial shows an example of a webpage about women programmers and I have started to write the code to produce this page. First, I have written the html code, defining all the elements and adding urls, a sound file and a video file. The latter two both work!! This was quite something. I have also been able to add a floating element, after a lot of researching. The header with the nav bar and its links were not too difficult to get in the webpage, but the various pictures and other elements should be positioned in a specific way and this is a challenge.

March 26:
In our skype today, Lori and I decided that my goal should be to become a developer. So far, my feeling was that it would be too ambitious to aim for this. On the other hand, it has become more than obvious that I like coding, I am very motivated and eager to learn more, and I have been spending more time than ever on coding. I even stopped working as a freelance editor and corrector to focus only on learning to code. This is no longer a hobby.
I have continued working on Tutorial 6. It is mainly the styling now. I need more explanation on the sectioning parts that build the structure and how these fit in with the other elements that HTML uses (<head> versus <header>, <main> versus <body> etc.). Somehow I feel it would have been better not to introduce this just yet in the tutorial. There should at least have been more explanation, this is not helpful. Anyway, I continued the styling, mainly by trying out things that did not work the way I intended. Learning by doing, as they say. Perhaps I need a book to be able to check things and not having to go through ten internet search results before I find the information I need.

March 28:
Building and styling a webpage yourself is a good way to learn. It was surprising how much time I needed to get three pictures horizontally aligned. I am still unclear on what the problem was. It is the disadvantage of tweaking your code: what was changed, HTML or CSS code? and how? You just don't know it anymore. It has become a bit more complex now. Still, the page almost looks the way it should. I will finish the page and hopefully I can discuss it with someone during the next codebar evening. The fact that the result looks like it should, does not mean I used the right code to get it. I found it a lot harder to get clear information regarding CSS than, for example, on Python. Maybe that has to do with the fact that you can do things in many different ways. There is one codebar tutorial left and I will work on that as soon as I have finished the webpage from tutorial 6.

March 29:
Tutorial 6 is finished and the webpage looks like the example in the tutorial so I am happy. I did not try to incorporate the resizing for different screen formats. The tutorials go very quickly over many things and to me this is a separate topic I need to dive into. I also did not look into the accessibility issue. This is an important aspect of websites and it is a topic I want to look at separately when I understand basic webpage creation better.
I have updated the profile page I made during the Le Wagon workshop by adding the codebar logo and a link to their website. The logo I had to find online which was not easy and I do not understand the code I found (and used) for the html file, but it works. Looks cool, too. I also finally succeeded getting the GitHub and LinkedIn logos one on line.

April 1:
After a bit more than one month of coding 'full-time', I certainly can see the difference this has made in my learning curve. Looking at the Trello board under 'Done', I see the DjangoProject tutorial that I completed (33 different items) which involved a lot of research as well as two false starts (with the Django Girls tutorial and the Django Marcador tutorial). According to Emily, the DjangoProject tutorial is actually not easy and perhaps not ideal for a beginner. It was good to hear this from someone who is a pro, because I really found it hard.
After this DjangoProject tutorial, I took on HTML and CSS and started with the codebar tutorials. I have completed 6 out of 7 and have learned an incredible amount of new things. I have created a number of webpages, some of them entirely by myself, and that is a great result. I did a workshop on HTML and CSS organised by Le Wagon and learned a lot, also producing a webpage that I have improved afterwards and published via Google Pages. Some nice reactions as well. In addition, I started the Epicodus tutorials on HTML and CSS and have already finished four in the past month. For the purpose of practicing, I started a blog: Coding @60 (a bit of a grumpy person writing about how young people get all the attention, whine whine whine). I have experimented with relative paths to use html 'sub-documents' with links in the main text and so far this works. I have learned a lot about styling, using links, images etc. The quick result of changes in the code is nice and makes experimenting easier.
The conclusion after the first month is that I have enjoyed myself gathering new knowledge and competencies and applying all of this immediately. I really see that I am going somewhere. If the SoC takes place, I will start calling myself 'developer'. Fingers crossed.

April 6:
The Epicodus tutorials have all been finished and today I also finished the last (7th) codebar tutorial on HTML-CSS. I found it lacking in explanation but the part about media queries was clear and very useful.
Today Lori and I talked about what I would like to work on in the 'summer of code'. Originally, we looked at Django because Lori was interested in doing a Django project. It involves Python so that is good for both of us and I was very interested so we took it from there. Right now, I have started to wonder if this is what I want to continue with. Although creating websites and everything that is involved is really great to do and I found it not too overwhelmingly difficult, I feel it is something that might lead to more commercial opportunities. I am wondering: if I myself am convinced that women can make a difference in tech, then where would I want to contribute? From what I read about artificial intelligence and especially the ethical implications I feel it is something I would want to look into. I am not necessarily looking for a career in tech meaning a high salary and all that. It is the technology itself that I am curious about, not the career opportunities.
Anyway, we'll see. For now, I will put Django etc. on hold and start reading more about machine learning and AI.

April 9:
Well, this has been pretty disappointing. I have worked my way through a course designed by the University of Helsinki. The course aims to introduce AI and machine learning to a wider public. In addition to the theory (very generally explained, of course, since it is only an introduction) there are exercises. I failed miserably as soon as maths were involved. Calculations of probability etc. is not something I understand. Of course, I could invest in a maths course but it is something that has never come naturally to me. I do not 'see' the logic. So that was a short but useful experience. My interest lies with the ethical side of AI but if I do not understand the technical part, it remains a philosophical interest. I will not be able to be involved in any programming or data analytics, at least that is my conclusion.

April 14:
This week I have worked on my Udemy Python course. A lot of topics are dealt with but it stays a bit on the surface: some things I really would not be able to do by myself. Take classes: I still am in the dark and feel like I do not understand this, even though I have used the syntax here and there. But the bigger view is missing: why would I want to use classes? To what purpose? And how? Yesterday Lori helped me start a new project to work with classes: building a product inventory and keeping track of changes. It is overwhelming. The idea is that the classes can interact. I believe everything you tell me but I do not understand how this works. Too many 'self.' and other '.' etc. The fact that a class has instances as well as methods, and what the syntax should be of these, it is all still rather unclear. So I started a repo on GitHub called Wrestling-Classes. I want to work on classes until I understand what they are about.

April 17:
I looked at classes this week, using various tutorials and other info. It starts to dawn on me. The question 'why is this useful' has been answered after following the description of how to start a game using class LivingThings for the hero, the monsters, etc. and give them all health, gold, inventory with weapons etc. This makes sense. I was getting fed up with the 'Dog' class that I have come across at least four times now. There has to be a practical angle as far as I am concerned: why would I want to use classes? how can methods help? After working on this, I at least understand how classes and methods can save an enormous amount of coding work. It also means that you can change things more easily and the code is more flexible as a result. The interaction between classes is something I have to work on because I do not see that yet. I will continue working on classes for a bit.

April 18:
After working on using classes and methods for this game, I have worked on applying classes and methods in a bookshop. This is similar to what Lori and I looked at about a week ago. The thing is that I now understand classes and initialisation, and writing methods etc. But where do I go from here? I can have books ordered, sold, inventory counted, etc. but how do I use this in a programme.
One more week and I will have been working on code more or less fulltime for two months. I think I have spent between 25 and 35 hours per week coding, plus some hours thinking and discussing, attending sessions on CSS etc. It really made an enormous difference, quitting the text work and having all this time to work on Python, HTML and CSS.

April 22:
Today I finished the Udemy Python 3 Bootcamp course and received a certificate. This feels good. The certificate states a course of 24 hours but that refers only to the video tutorials: much more time has gone into this, with tests and projects and exercises. I started October 30 2018, but of course worked on it only a few hours every week in the beginning. Only since this March have I been able to spend more time on learning to code.
The new project I have chosen is GitHub. The GitHub Learning Lab offers many tutorials that I want to do. I finished the Introduction to GitHub tutorial today. There is a bug in the tutorial on how to use Markdown and I asked for help from the GitHub support staff. Hopefully, they'll get back to me soon.
The Udemy course only scratched the surface and I am very aware of that. Still, it was useful to go through the basics and a few more advanced things. There is a list of 100 (!!) ideas for Python projects to choose the final Capstone Project from. I have used two ideas so far but hope to use more: it beats coming up with something myself (although some of these ideas are completely outside of the scope of this course, almost ridiculously so).

April 26:
This week I continued working on OOP. I got some help from David during the Codebar evening, learning a lot from him as always. The interaction between classes is still not clear to me but I feel more or less at easy creating classes and methods so we're getting somewhere.
Amalia and I met yesterday to talk about our plans for a Summer of Code. The timing would have to change to Sept-Nov, probably. She has holidays planned in August. We talked about next steps, the involvement of Codebar, sponsors, etc. A Trello board was set up by Amalia so that we can keep track of things to do, doing and done. We are very much on the same page to take this forward and we are certain that there will be a lot of support forthcoming from various sides.
There are a number of workshops that I will be attending in the coming weeks: one on CSS, the opening of the E-mma association here in Barcelona, a talk on AI, introduction to Bootstrap, and of course the Codebar evenings and Inspiring Lightning talks at Thoughtworks. I am learning loads and loads of things, and that is very satisfying and stimulating.

April 27:
This week I have worked on OOP and I also went through a number of GitHub Learning Lab courses:
* Introduction to GitHub
* Communicating using Markdown
* Uploading to GitHub
* Managing Merge Conflicts
* Reviewing Pull Requests
* GitHub Pages
I am stuck in the course on HTML because the bot does not respond so I expect I will have to start anew, but maybe I'll skip it because it is just basics that I have done several times already.
Working with a bot in these courses is a good idea, especially the two or three in which you simulate working in a team using GitHub. It is difficult to get a feel of how GitHub works if you are not working on a project with other people.

In the coming week I will be doing a CSS workshop at the Barcelona Code School and I will attend the official opening of E-mma Association at the Epitech Campus.

April 30:
Two months into more intensive coding now and I am glad I stopped my proofreading etc. to have more time for coding. At the same time it turns out I let many things distract me now that there are no deadlines to meet and so on. I really need to plan what I want to achieve in a specific week. At the same time, that is not easy because I can list many things but usually cannot predict how much time is involved. So it is a learning path, being all by myself setting out my studies.
In the meantime, Amalia and I are looking at the RGSoC projects for 2019. I made a huge G-sheet with all the info and now we have to consider the pro's and con's and narrow it down.
I am not sure exactly where we are going with this: do we have to take on a RGSoC project, or can we do another open source project? Let's see what happens.

May 2:
This week I have done the CSS workshop at BCS. The workshop at Le Wagon was better, I must say. The person giving the workshop at BCS talked softly, not all too clear, and the light in the room made the pictures on the screen look vague and difficult to read. Anyway, for me it was mostly repeating things, which is always good. I also learned a few new things and there were a number of things I needed to check afterwards to compare these with what I had been working on. So it was useful.
I continued practicing with GitHub but the various tutorials now start to feel like repetition. I think I will move on to something else. Perhaps I can work on a repo together with Amalia and that will help me more than any other tutorial I can take.

May 3:
I have started going through the RGSoC projects to see what would be interesting and relevant for Amalia and myself to be involved in. One project I came across mentioned Rails and since I plan to do a workshop on Ruby on May 18, I looked at the website for the project. It is fun: building games with Ruby 2D. Looks simple and attractive. After this, I installed Ruby and some stuff that was recommended. The .rb files did not run so I checked and tested some things, to see what was wrong. After downloading a package from GitHub that was recommended on Stackoverflow, the command line suddenly changed to Henriette MacBook-Air%. It was not possible to change to a directory. Nothing was possible: everything I tried returned 'no permission' error messages. I ended up reinstalling my Mac. This was sooo frustrating. At the same time, it was exactly what you are always afraid of: installing something that ends up messing up your system. I'll leave Ruby until the workshop on the 18th.
