LET OP: in de video is de hoofdfolder 'desktop' en dat is bij mij 'WebBlog'.
In de video heet het project 'django_project' en dat is bij mij 'webblog'.
De folder WebBlog heeft een subfolder webblog met daarin ook een subfolder die
webblog heet. Om de server te starten (manage.py runserver) moet de folder
WebBlog/webblog worden gebruikt en niet WebBlog/webblog/webblog.

NB: when using a . before a filename (such as .models) it means the file is in
the SAME DIRECTORY.

Projectstructuur:
In de tutorial wordt het file manage.py (dat in webblog zit) niet gewijzigd.
-  settings.py kan gewijzigd worden om settings aan te passen.
-  urls.py bepaalt urls waar de gebruiker naartoe gestuurd wordt
   (de 'routes').
-  wsgi.py bepaalt hoe de Python web-applicatie communiceert met de server. Deze
   configuratie wordt door Django automatisch opgezet (in de tutorial wordt niets
   gewijzigd in wsgi.py)

COMMANDS:
VENV:
To create a venv you must be in the main project folder (NOT the folder for your app).
For this blog project, the main folder is WebBlog and the folder 'blog' is the app
folder. For a venv use the command: python3 -m venv <NAME>
==> it is customary to use the name 'venv' so that makes the full command:
python3 -m venv venv
To run the venv use: source venv/bin/activate (name is venv here).
To deactivate the venv use: deactivate.
NEVER add files to the venv folder!
The venv folder should show up in your main project folder. You can add it to a
.gitignore file (also in this main project folder) by putting in the .gitignore:
.venv
venv/
.env
env/
You can also add __pycache__/ and db.sqlite3 to the .gitignore to stop these from
syncing with GitHub.
RUN THE SERVER:
$ python3 manage.py runserver ==> to quit the server: Ctrl c
INSTALL DJANGO:
pip3 install django
COPY VENV SET-UP TO OTHER PROJECT:
$ pip3 freeze > requirements.txt
This copies all dependencies from the venv application. To paste in project:
$ pip3 install -r requirements.txt
The requirements.txt file should NOT be added to .gitignore.
CREATE USER for admin webpage:
$ python3 manage.py createsuperuser
To be able to use the superuser command, FIRST create a database by migrating,
which will create a number of default tables such as the auth_user table, which
is needed to use the createsuperuser command. Dit gaat met makemigrations:
MIGRATION COMMANDS:
$ python3 manage.py makemigrations   to prepare the migration
$ python3 manage.py migrate       to actually RUN the migration
CREATE APP:
$ python3 manage.py startapp <name>   ===>> after creating a new app, ADD IT TO
THE INSTALLED APPs LIST IMMEDIATELY (under Installed_Apps in project settings.py).
You need a Config name and that will be in the apps.py file in the newly created
app (for example, BlogConfig or UsersConfig). The code is 'blog.apps.BlogConfig'
or 'users.blog.UsersConfig' in these examples.

pk = primary key (user.pk is the same as user.id)

There are two files with urls: one in the webblog folder and one in the blog folder.
When entering the http://127.0.0.1:800/ address (which is the same as localhost!),
first the webblog urls.py file is checked. The part of the http address that is
found in this urls file gets 'chopped off' and the remaining part is passed into
the blog url file. Example: http://127.0.0.1:800/blog/about will first look at
'blog' in the webblog urls. This is found and matches the views.about function,
which leads to the blogs.url file in the blog folder. The http address that is
sent is ONLY 'about', because 'blog' has already been found. In the views there
is an 'about' function (def about(request):) which returns an HttpResponse.

The html for the blog is stored in a folder called templates. Within that folder,
there is a folder for the blog app. This contains the html for the blog pages.

With template inheritance, duplication of code can be avoided so that changes
do not have to be made in several pages. This is done with the base.html file
where the sections of code that are SHARED are stored. The UNIQUE html code is
stored in the html templates such as home.html and about.html. The base.html is
the PARENT template and from this the other templates will inherit shared code.

IMPORTANT: AVOID HAVING TO CHANGE CODE IN MULTIPLE FILES (for example urls) BY
USING TEMPLATE INHERITANCE, URLS DEFINED IN THE url.py FILE ETC.

ORM: Object Relational Mapper. This is built into Django and allows access to
the database (query) in an easy, object-based manner. It allows for using different
databases without having to change the code.

VIEWS:
Django has many views installed, for example login and registration for sites.
When importing views (from django.contrib.auth import views) always give these
a name: auth_views or user_views etc.

MODELS:
When generating a new model, this has to be implemented by making a migration and
subsequently running the migration. A new model should also be added to the admin.py
file in the app where the new model is created.

GENERAL
Web framework: predefined code that can be used to solve a specific problem (for
example, tools and libraries). A framework simplifies common web development
operations. It is a set of APIs (Application Programming Interface).
 -  Django has Object-Relational Mapper (ORM) to define data models entirely in
    Python.
 -  Django also offers tight integration between components, that have been
    developed by the Django team.
 -  Automatic Administration Interface: Django provides a powerful and production-
    ready interface that can be used to manage content on a site.
 -  Multi-Lingual Support plus local specific formatting of time, date, etc.

Django uses MVC (Model View Controller), a software design pattern for developing
web applications which breaks the code into segments:
  Model:   storing and maintenance of data
  View:    displaying the requested portion of data to the user
  Controller: regulating the interactions between mode and view
==> the controller handles requests and forwards these to model and view.

NOTE: in Django, this is used as MVT: the Model View Template because Django
      itself takes care of the Controller part:
  -  Model: data access layer; anything to do with interacting, relating and
         validating the data
  -  View: business logic layer; accesses the model and displays the
        appropriate template; view accesses both the model and the template
  -  Template: presentation layer; presentation-related decisions; a HTML
     file mixed with Django Template Language (DTL).

In Django, a website or project can have just one or various apps (for example,
a website with a client app, a store app, etc.). This way, apps can be moved to
other projects and used by other developers.


================================================================================
NO IDEA WHAT THIS IS: came with Homebrew (text copied from command line):

openssl is keg-only, which means it was not symlinked into /usr/local,
because Apple has deprecated use of OpenSSL in favor of its own TLS and crypto libraries.

If you need to have openssl first in your PATH run:
  echo 'export PATH="/usr/local/opt/openssl/bin:$PATH"' >> ~/.bash_profile

For compilers to find openssl you may need to set:
  export LDFLAGS="-L/usr/local/opt/openssl/lib"
  export CPPFLAGS="-I/usr/local/opt/openssl/include"


To get to the interactive console (command line) run: python3 manage.py shell
webpage admin: Jethet, textual.infomail@gmail.com, Django@2019
TestUser met Test@2019
NewUser met Testing321
